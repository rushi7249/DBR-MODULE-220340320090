create table dept(DEPTNO int(2),
DNAME varchar(15),
LOC varchar(10));
insert into dept values(10 ,'ACCOUNTING', 'NEW YORK'),
(20 ,'RESEARCH' ,'DALLAS'),
(30 ,'SALES' ,'CHICAGO'),
(40 ,'OPERATIONS' ,'BOSTON');
select * from dept; -- Q1

create table emp(EMPNO int(4),
ENAME varchar(10),
JOB varchar(9),
HIREDATE date,
SAL float(7,2),
COMM float(7,2),
DEPTNO int(2));
desc emp;

insert into emp values(7839 ,'KING', 'MANAGER', '1991-11-17', 5000 ,NULL, 10);
insert into emp values(7698, 'BLAKE', 'CLERK' ,'1981-05-01' ,2850 ,NULL ,30),
(7782 ,'CLARK', 'MANAGER', '1981-06-09', 2450, NULL, 10),
(7566, 'JONES', 'CLERK' ,'1981-04-02', 2975 ,NULL, 20),
(7654 ,'MARTIN', 'SALESMAN', '1981-09-28', 1250, 1400 ,30),
(7499 ,'ALLEN', 'SALESMAN' ,'1981-02-20' ,1600 ,300, 30);
select * from emp; -- Q2
-- 3. Display all the employees where SAL between 2500 and 5000 (inclusive of both)
select ename from emp where sal between 2500 and 5000; -- Q.3
-- 4. Display all the ENAMEs in descending order of ENAME.
select ename from emp order by ename desc ; -- Q4

 -- 5. Display all the JOBs in lowercase
 select lower(job) from emp; -- Q5

 -- 6. Display the ENAMEs and the lengths of the ENAMEs.
select ename, length(ename) from emp; -- Q6

select * from emp;

-- 7. Display the DEPTNO and the count of employees who belong to that DEPTNO .
select deptno,count(ename) from emp group by deptno;


-- 8. Display the DNAMEs and the ENAMEs who belong to that DNAME.

select ename ,dname from emp, dept
where dept.deptno=emp.deptno;


-- 9. Display the position at which the string ‘AR’ occurs in the ename.
select ename,position('AR' in ename) as First_occ_AR from emp ;
 -- 10. Display the HRA for each employee given that HRA is 20% of SAL.

select ename,sal*0.20 "HRA" from emp;

-- SECTION 2
/*2. Create a stored function by the name of FUNC1 to take three parameters, the
sides of a triangle. The function should return a Boolean value:- TRUE if the
triangle is valid, FALSE otherwise. A triangle is valid if the length of each side is
less than the sum of the lengths of the other two sides. Check if the dimensions
entered can form a valid triangle. Calling program for the stored function need not
be written.*/
delimiter //
create function FUNC1(side1 int, side2 int , side3 int)
returns boolean
deterministic 
begin 
if(side1 <=(side2 + side3)) then
if(side1<=(side2 + side3) and side3 <=(side1 + side2)) then
return true ;
else 
return false ; 
end if;
else 
return false;
end if ;
end ; //
 delimiter ; 
 
 select func1(3,5,4) from dual;
 select func1(13,15,12) from dual;
select func1(10,5,2) from dual;
select func1(3,5,21) from dual;
  
  
/* 1. Write a stored procedure by the name of PROC1 that accepts two varchar strings
as parameters. Your procedure should then determine if the first varchar string
exists inside the varchar string. For example, if string1 = ‘DAC’ and string2 =
‘CDAC, then string1 exists inside string2. The stored procedure should insert the
appropriate message into a suitable TEMPP output table. Calling program for the
stored procedure need not be written.*/
drop table tempp;
create table tempp(result varchar(30));

delimiter //
create procedure proc1(str1 varchar(20), str2 varchar(20) )
begin 
if INSTR(str1 ,str2)>0 then 
insert into tempp values ('String 2 exit in string 1');
else 
insert into tempp values('string  1 exit in string 2');
end if ;
end; //
delimiter //
drop procedure proc1;
call proc1('CDAC' ,'DAC');

select * from tempp;
